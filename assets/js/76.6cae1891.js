(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{451:function(t,e,i){"use strict";i.r(e);var a=i(45),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"_4-congestion-control-拥塞控制"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_4-congestion-control-拥塞控制"}},[t._v("#")]),t._v(" 4 Congestion Control 拥塞控制")]),t._v(" "),i("p",[t._v("防止 sender 发送过多数据至网络, 是健壮网络系统最难的地方之一")]),t._v(" "),i("blockquote",[i("p",[t._v("和性增长/乘性降低（英语：additive-increase/multiplicative-decrease、AIMD）算法是一个反馈控制算法，最广为人知的用途是在TCP拥塞控制。AIMD将拥塞窗口的线性增长与监测到拥塞时的指数降低相结合。使用AIMD拥塞控制的多个流将最终收敛到使用等量的共享链路。")])]),t._v(" "),i("p",[t._v("拥塞本身是不可避免的。")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("高流量的情况下: 保持链路繁忙且传输迅速")])]),t._v(" "),i("li",[i("p",[t._v("极大-极小公平: 在通信网络中，对稀有资源进行多路复用和分配，当且仅当分配可行时，才能通过分配实现极大-极小公平，并且尝试增加任何参与者的分配必然导致分配减少分配相等或较小的其他参与者的数量。")])]),t._v(" "),i("li",[i("p",[t._v("快速响应网络情况")])]),t._v(" "),i("li",[i("p",[t._v("分布式控制")])]),t._v(" "),i("li",[i("p",[t._v("Service Provider: maximize link utilization")])]),t._v(" "),i("li",[i("p",[t._v("User: I get my fair share")])]),t._v(" "),i("li",[i("p",[t._v("Want network to converge to a state where everyone gets I/N")])]),t._v(" "),i("li",[i("p",[t._v("Avoid congestion collapse")])])]),t._v(" "),i("h2",{attrs:{id:"tcp-congestion-control"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tcp-congestion-control"}},[t._v("#")]),t._v(" TCP Congestion Control")]),t._v(" "),i("p",[t._v("TCP implements congestion control at the end host(终宿主).")]),t._v(" "),i("ul",[i("li",[t._v("Reacts to events observable at the end host(e.g packet loss).")]),t._v(" "),i("li",[t._v("Exploits TCP's sliding window used for flow control.")]),t._v(" "),i("li",[t._v("Tries to figure out how many packets it can safely have outstanding in the network at a time.")]),t._v(" "),i("li",[t._v("Varies window size according to AIMD.")])]),t._v(" "),i("h3",{attrs:{id:"aimd-和性增长-乘性降低"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aimd-和性增长-乘性降低"}},[t._v("#")]),t._v(" AIMD 和性增长/乘性降低")]),t._v(" "),i("ul",[i("li",[t._v("packet received OK: W -> W + 1/W")]),t._v(" "),i("li",[t._v("packet dropped: W -> W / 2")])]),t._v(" "),i("h4",{attrs:{id:"aimd-单流说明-略"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aimd-单流说明-略"}},[t._v("#")]),t._v(" AIMD 单流说明(略)")]),t._v(" "),i("h4",{attrs:{id:"aimd-多流"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aimd-多流"}},[t._v("#")]),t._v(" AIMD 多流")]),t._v(" "),i("ul",[i("li",[t._v("Throughput of an AIMD flow is sensitive to the drop probability and is very sensitive to the RTT(Round-trip  time: 往返时间 (RTT) 是网络请求从起点到目的地然后再回到起点所花费的时长（以毫秒为单位）)")]),t._v(" "),i("li",[t._v("With many flows, each flow follows its own AIMD rule")]),t._v(" "),i("li",[t._v("If the bottleneck contain packets from many flows, the buffer is going to remain highly occupied all the time")]),t._v(" "),i("li",[t._v("Above implies that RTT seen by the packets is constant")])]),t._v(" "),i("h3",{attrs:{id:"tcp-tahoe"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tcp-tahoe"}},[t._v("#")]),t._v(" TCP Tahoe")]),t._v(" "),i("p",[t._v("对老版本的一些改进")]),t._v(" "),i("ul",[i("li",[t._v("congestion window")]),t._v(" "),i("li",[t._v("timeout estimation")]),t._v(" "),i("li",[t._v("self-clocking")])]),t._v(" "),i("p",[t._v("超时处理 && triple duplicate ack")]),t._v(" "),i("ul",[i("li",[t._v("Set threshold to congestion window/2")]),t._v(" "),i("li",[t._v("Set congestion window to 1")]),t._v(" "),i("li",[t._v("Enter slow start state")])]),t._v(" "),i("h3",{attrs:{id:"tcp-reno"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tcp-reno"}},[t._v("#")]),t._v(" TCP Reno")]),t._v(" "),i("ul",[i("li",[t._v("超时处理与Tahoe相同")]),t._v(" "),i("li",[t._v("On triple duplicate ack\n"),i("ul",[i("li",[t._v("threshold to congestion window/2")]),t._v(" "),i("li",[t._v("Set congestion window to congestion window / 2(fast recovery)")]),t._v(" "),i("li",[t._v("Retransmit missing segment(fast retransmit)")]),t._v(" "),i("li",[t._v("stay in congestion avoidance")])])])]),t._v(" "),i("h3",{attrs:{id:"tcp-newreno"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#tcp-newreno"}},[t._v("#")]),t._v(" TCP NewReno")]),t._v(" "),i("ul",[i("li",[t._v("超时处理与Tahoe/Reno相同")]),t._v(" "),i("li",[t._v("During fast recovery\n"),i("ul",[i("li",[t._v("keep track of last unacknowledged packet when entering fast recovery")]),t._v(" "),i("li",[t._v("On every duplicate ack, inflate congestion window by maximum segment size")]),t._v(" "),i("li",[t._v("When last packet acknowledged, return to congestion avoidance state, set cwnd back to value set when entering  fast recovery")]),t._v(" "),i("li",[t._v("Start sending out new packets while fast retransmit is in flight")])])])]),t._v(" "),i("h2",{attrs:{id:"reading-an-rfc"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#reading-an-rfc"}},[t._v("#")]),t._v(" Reading an RFC")]),t._v(" "),i("p",[t._v("RFC: 请求意见稿（英语：Request for Comments，缩写：RFC），又翻译作意见征求，意见请求，请求评论是由互联网工程任务组（IETF）发布的一系列备忘录。文件收集了有关互联网相关信息，以及UNIX和互联网社区的软件文件，以编号排定。目前RFC文件是由互联网协会（ISOC）赞助发行。")]),t._v(" "),i("p",[t._v("参考链接: https://www.mnot.net/blog/2018/07/31/read_rfc")])])}),[],!1,null,null,null);e.default=o.exports}}]);