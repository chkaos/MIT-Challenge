(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{395:function(t,a,e){"use strict";e.r(a);var i=e(45),n=Object(i.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"chapter1-software-engineering"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#chapter1-software-engineering"}},[t._v("#")]),t._v(" Chapter1 Software Engineering")]),t._v(" "),e("h2",{attrs:{id:"modularity-abstraction-and-modeling"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modularity-abstraction-and-modeling"}},[t._v("#")]),t._v(" Modularity, abstraction, and modeling")]),t._v(" "),e("ul",[e("li",[t._v("模块化: 构建可复用组件")]),t._v(" "),e("li",[t._v("抽象: 隐藏模块的复杂度, 达到黑盒的效果")])]),t._v(" "),e("p",[t._v("We can often make a design job easier by limiting the space of possible designs, and by standardizing on:\n• a basis set of primitive components;\n• ways of combining the primitive components to make more complex systems;\n• ways of “packaging” or abstracting pieces of a design so they can be reused (in essence creating new “primitives”); and\n• ways of capturing common patterns of abstraction (essentially, abstracting our abstractions).\nVery complicated design problems can become tractable using such a primitive-combinationabstraction-pattern (PCAP) approach.")]),t._v(" "),e("h2",{attrs:{id:"pcap-primitive-combination-abstraction-pattern"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pcap-primitive-combination-abstraction-pattern"}},[t._v("#")]),t._v(" PCAP (primitive-combination-abstraction-pattern)")]),t._v(" "),e("ul",[e("li",[t._v("一系列的基础组件")]),t._v(" "),e("li",[t._v("组合基础组件构成复杂系统")]),t._v(" "),e("li",[t._v("打包或抽象设计利于可复用方法")]),t._v(" "),e("li",[t._v("捕获常见抽象模式")])]),t._v(" "),e("p",[t._v("编程语言被称为编译器或解释器，会被其他计算机程序转换为计算机的机器语言。编程语言就属于PCAP系统，提供了基础操作，组合和抽象的方式以及捕捉常用抽象模式的方式。")]),t._v(" "),e("h2",{attrs:{id:"模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模型"}},[t._v("#")]),t._v(" 模型")]),t._v(" "),e("p",[t._v("简易版原型，保留了原系统的所需重要特征。难点：")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("决定原系统各方面的去留")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("Another important dimension in modeling is whether the model is deterministic or not. We\nmight, for example, model the effect of the robot executing a command to set its velocity as making an instantaneous change to the commanded velocity.")])])])]),t._v(" "),e("p",[t._v("分析模型 Analytical models")]),t._v(" "),e("p",[t._v("模型广泛应用于分析。")]),t._v(" "),e("p",[t._v("综合模型 Synthetic models")]),t._v(" "),e("p",[t._v("综合（仿生）模型（SM）由现存的，自治的软件组件构成，这些组件的存在和目的独立于它们所包含的基础模型。它以系统的方式将这些元素组合在一起，形成一个连贯的整体。")]),t._v(" "),e("p",[t._v("人类使用非正式系统模型进行综合。软件文档描述各种程序功能的库用作非正式模型，程序员可以用来组装这些组件以构建新的复杂系统。")]),t._v(" "),e("p",[t._v("内部模型 Internal models\n在控制理论的领域中，内部模型也称为内模型，是指为了估计系统扰动的影响，而去模拟系统特定输入下反应的程序。")]),t._v(" "),e("h2",{attrs:{id:"嵌入式系统-embedded-system"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#嵌入式系统-embedded-system"}},[t._v("#")]),t._v(" 嵌入式系统 (Embedded system)")]),t._v(" "),e("ul",[e("li",[t._v("与环境交互，计算行为大概可以分为以下")])]),t._v(" "),e("ol",[e("li",[t._v("从传感器获取信息")]),t._v(" "),e("li",[t._v("计算并缓存结果")]),t._v(" "),e("li",[t._v("采取行动改变外界")])]),t._v(" "),e("p",[t._v("这些操作可以以不同方式组合；")]),t._v(" "),e("blockquote",[e("p",[t._v("顺序执行: 命令式编程")])]),t._v(" "),e("blockquote",[e("p",[t._v("事件驱动: 用户界面程序通常是事件驱动程序, 程序被指定为与可能发生的特定事件相关的一系列过程（称为“处理程序”或“回调”)\n底层存在“事件循环”连续运行中，检查是否有任何触发事件发生，并且，如果有的话，调用关联的过程。")])]),t._v(" "),e("blockquote",[e("p",[t._v("变换器式程序 transducer")])]),t._v(" "),e("ul",[e("li",[t._v("transducer 能感受到被测量的信息，并能将感受到的信息，按一定规律变换成为电信号或其他所需形式的信息输出，以满足信息的传输、处理、存储、显示、记录和控制等要求。")]),t._v(" "),e("li",[t._v('变换器以固定的间隔（每秒可能多次）读取所有传感器，进行少量计算，存储一些下一个所需的值计算，然后生成操作的输出值。是一种系统设计思想的参考，缺点是偏向于"命令式".')])]),t._v(" "),e("h2",{attrs:{id:"编程模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编程模型"}},[t._v("#")]),t._v(" 编程模型")]),t._v(" "),e("ul",[e("li",[t._v("Imperative computation: 命令式计算， 例如计算机内部的处理器")]),t._v(" "),e("li",[t._v("Functional computation: 函数式计算, 更像是通过询问来获取答案。 需要条件语句/递归支持; 我们使用函数定义作为方法抽象，以及高阶函数的思想（将函数作为参数传递给其他函数）作为捕获常见高级模式的一种方式。")]),t._v(" "),e("li",[t._v("数据结构: 组合数据体现了另一种抽象的方式；比如可以构造一个社交网络。")]),t._v(" "),e("li",[t._v("OOP: computation + data structures\nObject-oriented programming is a style that applies the ideas of modularity and abstraction to\nexecution and data at the same time.")])])])}),[],!1,null,null,null);a.default=n.exports}}]);