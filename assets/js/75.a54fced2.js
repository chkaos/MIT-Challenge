(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{450:function(e,t,a){"use strict";a.r(t);var i=a(45),r=Object(i.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"_3-packet-switching-封包交换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-packet-switching-封包交换"}},[e._v("#")]),e._v(" 3 Packet Switching 封包交换")]),e._v(" "),a("h2",{attrs:{id:"packet-switching-vs-circuit-switching-电路交换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#packet-switching-vs-circuit-switching-电路交换"}},[e._v("#")]),e._v(" Packet Switching VS Circuit Switching 电路交换")]),e._v(" "),a("p",[e._v("Circuit Switching 常用于电话系统, 需要专有线路。")]),e._v(" "),a("p",[e._v("封包交换和电路交换的区别在于，前者並不会保留特定path，而后者会保留一個特定path給package。因此當packet switching同時遇到太多package进來時，就得進入到buffer裡面去排队，等待安排output communication，Circuit Switching則不必等待，而是在进來之前已經先预定好path，而因此，也必须在两个end system里面先建立好connection之后才能进行资料传输动作，而相对也有比較稳定的传输速率。")]),e._v(" "),a("h2",{attrs:{id:"packet-switching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#packet-switching"}},[e._v("#")]),e._v(" Packet Switching")]),e._v(" "),a("ul",[a("li",[e._v("forwarding table")]),e._v(" "),a("li",[e._v("buffers(当多个数据包同时到达或者网络拥堵时期需要缓冲区保存数据包)")])]),e._v(" "),a("p",[e._v("使用封包交换的好处: 对昂贵的网线的高效利用; 对路由及链接跳转失败有健壮性")]),e._v(" "),a("h2",{attrs:{id:"packet-delay"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#packet-delay"}},[e._v("#")]),e._v(" Packet Delay")]),e._v(" "),a("ul",[a("li",[e._v("packetization delay")]),e._v(" "),a("li",[e._v("propagation delay")]),e._v(" "),a("li",[e._v("queueing delay")])]),e._v(" "),a("p",[e._v("End to end delay: refers to the time taken for a packet to be transmitted across a network from source to destination. It is a common term in IP network monitoring, and differs from round-trip time (RTT) in that only path in the one direction from source to destination is measured.")]),e._v(" "),a("p",[e._v("端对端延迟的下限 = Propagation delay + packetization delay")]),e._v(" "),a("p",[e._v("传播延迟（英语：Propagation delay），在通信、电脑网络领域中，意指信号从发讯方传播到收讯方时，该传播过程的时间总长。")]),e._v(" "),a("p",[e._v("packetization delay: In a network based on packet switching, transmission delay (or store-and-forward delay, also known as packetization delay) is the amount of time required to push all the packet's bits into the wire. In other words, this is the delay caused by the data-rate of the link.")]),e._v(" "),a("p",[e._v("queueing delay: is the time a job waits in a queue until it can be executed. It is a key component of network delay. 是一个无法确定的数")]),e._v(" "),a("h3",{attrs:{id:"大部分应用不关心队列延迟-但是实时应用不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大部分应用不关心队列延迟-但是实时应用不同"}},[e._v("#")]),e._v(" 大部分应用不关心队列延迟, 但是实时应用不同")]),e._v(" "),a("h4",{attrs:{id:"playback-buffer-播放缓冲区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#playback-buffer-播放缓冲区"}},[e._v("#")]),e._v(" playback buffer 播放缓冲区")]),e._v(" "),a("p",[e._v("位于媒体解码器解码步骤前的一步")]),e._v(" "),a("h3",{attrs:{id:"simple-model-of-a-router-queue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#simple-model-of-a-router-queue"}},[e._v("#")]),e._v(" simple model of a router queue")]),e._v(" "),a("p",[e._v("Q(t) = Arrive(t) - Depart(t)  简易模型像个同时进出的水桶")]),e._v(" "),a("p",[e._v("小的数据包可以降低 end to end delay.")]),e._v(" "),a("h3",{attrs:{id:"queues-with-random-arrival-processes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#queues-with-random-arrival-processes"}},[e._v("#")]),e._v(" Queues with Random Arrival Processes")]),e._v(" "),a("ul",[a("li",[e._v("burstiness 增加延迟(突发性是活动或事件频率的间歇性增加和减少)")]),e._v(" "),a("li",[e._v("determinism 决定主义减少延迟\ndeterminism 又译拉普拉斯信条[1]，是一种哲学立场，认为每个事件的发生，包括人类的认知、举止、决定和行动，都有条件决定它发生，而非另外的事件发生。")]),e._v(" "),a("li",[e._v("利特尔法则: 可用于一个稳定的、非占先式的队列系统中。其内容为：在一个稳定的系统（L）中，长期的平均顾客人数，等于长期的有效抵达率（λ），乘以顾客在这个系统中平均的等待时间（W）")]),e._v(" "),a("li",[e._v("poisson process: 泊松过程是随机过程的一种，是以事件的发生时间来定义的。我们说一个 随机过程 N(t) 是一个时间齐次的一维泊松过程")])]),e._v(" "),a("blockquote",[a("p",[e._v("网络流量是非常不稳定. 数据包到达的过程不是泊松过程, 但它能很好使用新流量的到达过程模型")])]),e._v(" "),a("ul",[a("li",[e._v("M/M/1 Queue: M/M/1排队模型（M/M/1 model）是一种单一服务器（single-server）的（排队模型），可用作模拟不少系统的运作. M/M/1可一般化成为M/M/n模型，使可用时接受服务的人数为大于一。历史上，M/M/n模型首先被用来模拟电话系统\n"),a("ul",[a("li",[e._v("到达时间泊松过程")]),e._v(" "),a("li",[e._v("服务时间是指数分布（exponentially distributed）")]),e._v(" "),a("li",[e._v("只有一部服务器（server），遵循先到先服务规则")]),e._v(" "),a("li",[e._v("队列长度无限制")]),e._v(" "),a("li",[e._v("可加入队列的人数为无限")])])])]),e._v(" "),a("h2",{attrs:{id:"packet-switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#packet-switch"}},[e._v("#")]),e._v(" Packet Switch")]),e._v(" "),a("h3",{attrs:{id:"generic-packet-switch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generic-packet-switch"}},[e._v("#")]),e._v(" Generic Packet Switch")]),e._v(" "),a("ul",[a("li",[e._v("查找地址(forwarding table)")]),e._v(" "),a("li",[e._v("update header")]),e._v(" "),a("li",[e._v("queue packet(Switch to the correct egress port)")])]),e._v(" "),a("p",[e._v("hint: 算法最长前缀用于路由匹配")]),e._v(" "),a("p",[e._v("The simplest and slowest switches use output queueing, which minimizes packet delay.")]),e._v(" "),a("p",[e._v("Hight performance switches often use output queueing, with virtual output queues to maximize throughput.")]),e._v(" "),a("h4",{attrs:{id:"ethernet-switch-以太交换机"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ethernet-switch-以太交换机"}},[e._v("#")]),e._v(" Ethernet Switch 以太交换机")]),e._v(" "),a("h4",{attrs:{id:"internet-router-路由器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#internet-router-路由器"}},[e._v("#")]),e._v(" Internet Router 路由器")]),e._v(" "),a("p",[e._v("FIFO queues are a free for all: No priorities and no guaranteed rates.")]),e._v(" "),a("p",[e._v('Strict priorities: High priority traffic "sees" a network with no low priority traffic. Useful if we have limited amounts of high priority traffic.')]),e._v(" "),a("p",[e._v("Weighted Fair Queueing(WDQ) lets us give each flow a guaranteed service rate, by scheduling them in order of their bit-by-bit finishing times.")]),e._v(" "),a("h2",{attrs:{id:"控制-packet-delay"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#控制-packet-delay"}},[e._v("#")]),e._v(" 控制 Packet Delay")]),e._v(" "),a("p",[e._v("从前面Packet Delay模块可知 Packet Delay是不可控, 但是引入 Weighted Fair Queueing(WDQ) 控制速率后就打破这种情况")]),e._v(" "),a("ul",[a("li",[e._v("The rate at which a queue is served(WFQ)")]),e._v(" "),a("li",[e._v("The size of each queue")])]),e._v(" "),a("p",[e._v("漏桶算法(Leaky Bucket)是基于一种算法类比的如何桶具有恒定泄漏会溢出如果或者平均处水在倾倒速率超过速率桶的泄漏，或者如果比桶的容量更多的水是一次全部倒了。")]),e._v(" "),a("p",[e._v("令牌桶(Token Bucket): 是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。")])])}),[],!1,null,null,null);t.default=r.exports}}]);