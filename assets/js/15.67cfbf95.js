(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{363:function(e,t,a){e.exports=a.p+"assets/img/Bellman-Ford.18e6b25b.png"},416:function(e,t,a){"use strict";a.r(t);var s=a(45),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_15-single-source-shortest-paths-problem"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_15-single-source-shortest-paths-problem"}},[e._v("#")]),e._v(" 15.Single-source shortest paths problem")]),e._v(" "),s("p",[e._v("In many applications, each edge of a graph has an associated numerical value, called a weight. Usually, the edge weights are non- negative integers.")]),e._v(" "),s("p",[e._v('Weighted graphs may be either directed or undirected. The weight of an edge is often referred to as the "cost" of the edge.')]),e._v(" "),s("p",[e._v("这节课简单介绍两个最短路径搜索算法 Dijkstra 和 Bellman-Ford, 其时间复杂度和路径的weight无关.")]),e._v(" "),s("h3",{attrs:{id:"dijkstra-o-v-logv-e"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra-o-v-logv-e"}},[e._v("#")]),e._v(" Dijkstra O(V*logV+E)")]),e._v(" "),s("p",[e._v("works on non-negative, weight edges\n戴克斯特拉算法使用类似广度优先搜索的方法解决赋权图的单源最短路径问题。")]),e._v(" "),s("p",[e._v("该算法存在很多变体：戴克斯特拉的原始版本仅适用于找到两个顶点之间的最短路径，后来更常见的变体固定了一个顶点作为源结点然后找到该顶点到图中所有其它结点的最短路径，产生一个最短路径树。")]),e._v(" "),s("p",[e._v("在计算机科学的人工智能等领域也被称为均一开销搜索，并被认为是最良优先搜索的一个特例.")]),e._v(" "),s("h3",{attrs:{id:"bellman-ford-o-ve"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bellman-ford-o-ve"}},[e._v("#")]),e._v(" Bellman-Ford O(VE)")]),e._v(" "),s("p",[e._v("works on positive and negative, weight edges")]),e._v(" "),s("ul",[s("li",[e._v("reverse tolls")]),e._v(" "),s("li",[e._v("social networks")])]),e._v(" "),s("p",[e._v("求解单源最短路径问题的一种算法，它的原理是对图进行 |V|-1次松弛操作，得到所有可能的最短路径。其优于迪科斯彻算法的方面是边的权值可以为负数、实现简单，缺点是时间复杂度过高，高达O(|V||E|)。但算法可以进行若干种优化，提高了效率。")]),e._v(" "),s("p",[e._v("寻找最短路径的同时可以搜寻 负-循环.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(363),alt:"Bellman-Ford-For-Non-Negative-Circles"}})]),e._v(" "),s("p",[e._v("优化点:")]),e._v(" "),s("ul",[s("li",[e._v("最短路径的子路径均是最短路径")])]),e._v(" "),s("h3",{attrs:{id:"解路径图的一种思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解路径图的一种思路"}},[e._v("#")]),e._v(" 解路径图的一种思路")]),e._v(" "),s("p",[e._v("假如一个节点应该有2个状态， 映射出"),s("code",[e._v("two graphs with different states")]),e._v(".")])])}),[],!1,null,null,null);t.default=r.exports}}]);