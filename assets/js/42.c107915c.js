(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{413:function(o,t,e){"use strict";e.r(t);var s=e(45),a=Object(s.a)({},(function(){var o=this,t=o.$createElement,e=o._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":o.$parent.slotKey}},[e("h1",{attrs:{id:"_12-square-roots-newton-s-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_12-square-roots-newton-s-method"}},[o._v("#")]),o._v(" 12-Square roots, Newton's method")]),o._v(" "),e("p",[o._v("一些 multiplication 算法的讲解")]),o._v(" "),e("h4",{attrs:{id:"toom-cook算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#toom-cook算法"}},[o._v("#")]),o._v(" "),e("a",{attrs:{href:"https://zh.wikipedia.org/zh-hans/Toom-Cook%E7%AE%97%E6%B3%95",target:"_blank",rel:"noopener noreferrer"}},[o._v("Toom-Cook算法"),e("OutboundLink")],1)]),o._v(" "),e("p",[o._v("Toom-Cook 的原理是：对于给定的两个大整数 a 和 b ，将 a 和 b 分成 k 个较小的部分，每个部分的长度为 l ，并对这些部分执行运算。随着 k 的增长，可以组合许多乘法子运算，从而降低算法的整体复杂度，然后再次使用 Toom-Cook 算法递归计算乘法子运算，依此类推。Toom-3 和 Toom-Cook 两个术语有时会被错误的混用，但事实上 Toom-3 只是 Toom-Cook 算法在 "),e("code",[o._v("k=3")]),o._v(" 时的常见实现。")]),o._v(" "),e("h4",{attrs:{id:"schonhage-strassen-o-nlog-nlog-log-n"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#schonhage-strassen-o-nlog-nlog-log-n"}},[o._v("#")]),o._v(" Schönhage–Strassen {O(n"),e("em",[o._v("log n")]),o._v("log log n)}")]),o._v(" "),e("p",[o._v("除法复杂度 === 乘法复杂度")])])}),[],!1,null,null,null);t.default=a.exports}}]);