(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{432:function(t,a,v){"use strict";v.r(a);var _=v(45),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"_8-avoiding-debugging"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-avoiding-debugging"}},[t._v("#")]),t._v(" 8. Avoiding Debugging")]),t._v(" "),v("h3",{attrs:{id:"消除bug"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#消除bug"}},[t._v("#")]),t._v(" 消除bug")]),t._v(" "),v("p",[t._v("The best defense against bugs is to make them impossible by design.")]),t._v(" "),v("ul",[v("li",[t._v("静态检查")]),t._v(" "),v("li",[t._v("动态检查")]),t._v(" "),v("li",[t._v("Immutability: 一旦变量创建后, 其类型不允许修改")])]),t._v(" "),v("h3",{attrs:{id:"本地化bug"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#本地化bug"}},[t._v("#")]),t._v(" 本地化bug")]),t._v(" "),v("p",[t._v("可以尝试将它们本地化到程序的一小部分，这样我们就不必费劲查找错误的原因。当本地化为单个方法或小模块时，仅通过研究程序文本即可发现错误。")]),t._v(" "),v("h3",{attrs:{id:"断言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#断言"}},[t._v("#")]),t._v(" 断言")]),t._v(" "),v("p",[t._v("为类型的防御性检查定义一个过程是通常的做法，通常称为 assert")]),t._v(" "),v("p",[t._v("断言: 方法的参数值及返回值\n不断言: 避免运行时的断言 Runtime assertions")]),t._v(" "),v("h3",{attrs:{id:"增量开发"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#增量开发"}},[t._v("#")]),t._v(" 增量开发")]),t._v(" "),v("p",[t._v("将错误本地化到程序的一小部分的一种好方法是增量开发。一次只构建程序的一部分，然后继续进行测试。这样，当您发现错误时，很可能是您刚刚编写的部分，而不是大量代码中的任何地方。")]),t._v(" "),v("p",[t._v("单元测试和回归测试是两种好方法;")]),t._v(" "),v("h3",{attrs:{id:"模块化和封装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模块化和封装"}},[t._v("#")]),t._v(" 模块化和封装")]),t._v(" "),v("h3",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),v("p",[t._v("在本文中，我们研究了一些最小化调试成本的方法：")]),t._v(" "),v("p",[t._v("避免调试")]),t._v(" "),v("ul",[v("li",[t._v("使用静态类型，自动动态检查以及不可变的类型和引用之类的技术使错误变为不可能\n限制错误")]),t._v(" "),v("li",[t._v("使用断言快速失败会阻止错误扩散")]),t._v(" "),v("li",[t._v("增量开发和单元测试将错误限制在您最近的代码中")]),t._v(" "),v("li",[t._v("范围最小化减少了您必须搜索的程序数量")])]),t._v(" "),v("p",[t._v("考虑我们的三个主要代码质量度量：")]),t._v(" "),v("ul",[v("li",[t._v("避免错误: 我们正在努力阻止并摆脱它们。")]),t._v(" "),v("li",[t._v("容易明白: 诸如静态类型，最终声明和断言之类的技术是代码中假设的其他文档。变量范围的最小化使读者更容易理解变量的使用方式，因为要查看的代码更少。")]),t._v(" "),v("li",[t._v("准备好进行更改: 断言和静态键入以一种可自动检查的方式记录这些假设，以便将来的程序员更改代码时，会发现偶然违反这些假设的情况。")])])])}),[],!1,null,null,null);a.default=s.exports}}]);