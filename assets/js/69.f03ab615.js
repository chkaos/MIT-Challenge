(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{442:function(s,a,t){"use strict";t.r(a);var e=t(45),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"_22-queues-and-message-passing"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-queues-and-message-passing"}},[s._v("#")]),s._v(" 22.Queues and Message-Passing")]),s._v(" "),t("h3",{attrs:{id:"两个并发模型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两个并发模型"}},[s._v("#")]),s._v(" 两个并发模型")]),s._v(" "),t("p",[s._v("并行编程的模型：共享内存和消息传递。")]),s._v(" "),t("p",[s._v("multiprocessor shared memory\n在共享内存模型中，并发模块通过读取和写入内存中的共享可变对象进行交互。")]),s._v(" "),t("p",[s._v("在消息传递模型中，并发模块通过通信通道相互发送不可变消息进行交互。我们已经有一个消息传递的例子：客户端/服务器模式，其中客户端和服务器是并发进程，通常在不同的计算机上，通信通道是一个网络套接字。")]),s._v(" "),t("p",[s._v("network message passing\n与共享内存模型相比，消息传递模型具有几个优点，这可以归结为 Bug 的安全性更高。在消息传递中，并发模块通过通信通道传递消息，而不是通过共享数据的改变进行显式交互。共享内存的隐式交互很容易导致程序中不知道是并发且在线程安全策略中未正确配合的部分中意外交互、共享和操作数据。消息传递也只在模块之间共享不可变对象（消息），而共享内存需要共享可变对象，我们已经看到的可能是Bug 的来源。")]),s._v(" "),t("h3",{attrs:{id:"message-passing-with-threads"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#message-passing-with-threads"}},[s._v("#")]),s._v(" Message passing with threads")]),s._v(" "),t("p",[s._v("我们之前讨论过进程之间的消息传递：客户端和服务器通过网络套接字进行通信。我们还可以在相同的进程中使用线程之间的消息传递，这种设计通常比具有锁的共享内存设计更可取；")]),s._v(" "),t("h3",{attrs:{id:"消息传递的线程安全参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#消息传递的线程安全参数"}},[s._v("#")]),s._v(" 消息传递的线程安全参数")]),s._v(" "),t("p",[s._v("具有消息传递的线程安全参数可能依赖于：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("同步队列的现有线程安全数据类型。此队列绝对是共享的，并且绝对是可变的，因此我们必须确保它是安全的并发。")])]),s._v(" "),t("li",[t("p",[s._v("多个线程可同时访问的消息或数据的不变性。")])]),s._v(" "),t("li",[t("p",[s._v("将数据限制到单个生产者/使用者线程。一个生产者或使用者使用的本地变量对其他线程不可见，这些线程仅使用队列中的消息相互通信。")])]),s._v(" "),t("li",[t("p",[s._v("限制通过队列发送但一次只能访问一个线程的可变消息或数据。必须认真阐述和执行这一论点。但是，如果一个模块在将某些可变数据（如烫手山芋）放到要传递到另一个线程的队列中时，就会丢弃对某些可变数据的所有引用，则一次只有一个线程可以访问这些数据，这排除了并发访问。")])])]),s._v(" "),t("p",[s._v("与同步相比，消息传递可以使并发系统中的每个模块更容易维护自己的线程安全不变量。如果数据是使用线程安全通信通道在模块之间传输的，我们不必对访问共享数据的多个线程进行推理。")]),s._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("消息传递系统与锁同步，而不是在共享通信通道（例如流或队列）上同步。")]),s._v(" "),t("p",[s._v("与阻塞队列通信的线程是单个进程中传递消息的有用模式。")])])}),[],!1,null,null,null);a.default=r.exports}}]);