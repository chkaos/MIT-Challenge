(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{424:function(t,e,a){"use strict";a.r(e);var i=a(45),s=Object(i.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_23-computational-complexity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-computational-complexity"}},[t._v("#")]),t._v(" 23. Computational complexity")]),t._v(" "),a("h3",{attrs:{id:"p-exp-r"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p-exp-r"}},[t._v("#")]),t._v(" P, EXP, R")]),t._v(" "),a("p",[t._v("P = {problems solvable in polynomial O(n^c) time}\nEXP = {problems solvable in exponential O(2^(n^c)) time}\nR = {有限时间内能解决的问题}  “recursive”  (!R 表示无法解决)")]),t._v(" "),a("h4",{attrs:{id:"证明某些迷题无解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#证明某些迷题无解"}},[t._v("#")]),t._v(" 证明某些迷题无解")]),t._v(" "),a("ul",[a("li",[t._v("negative-weight cycle detection(P)")]),t._v(" "),a("li",[t._v("n * n 象棋 (EXP)")]),t._v(" "),a("li",[t._v("halting problem: 程序是否会中止 (!R)")])]),t._v(" "),a("h4",{attrs:{id:"大部分决策问题是-incomputable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大部分决策问题是-incomputable"}},[t._v("#")]),t._v(" 大部分决策问题是 incomputable")]),t._v(" "),a("ul",[a("li",[t._v("程序是二进制文本, 最终是个数字")]),t._v(" "),a("li",[t._v("决策问题(decision problem)看成输入是二进制文本返回布尔")])]),t._v(" "),a("h4",{attrs:{id:"np"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#np"}},[t._v("#")]),t._v(" NP")]),t._v(" "),a("p",[t._v('NP = {problems solvable in polynomial O(n^c) time via a "lucky" 算法}')]),t._v(" "),a("ul",[a("li",[t._v("non deterministic model 非确定性算法模型")]),t._v(" "),a("li",[t._v("在计算机科学中，与确定性算法相反，非确定性算法是一种即使对于相同输入也可以在不同运行中表现出不同行为的算法。算法的运行方式可能会因运行方式而有所不同。由于争用条件，并发算法在不同的运行中执行的方式可能会有所不同。概率算法的行为取决于随机数生成器。")]),t._v(" "),a("li",[t._v("Tetris 俄罗斯方块 (NP)")]),t._v(" "),a("li",[t._v('另一种说法 {decision problems with "solutions" that can be checked in polynomial O(n^c) time}')]),t._v(" "),a("li",[t._v("proof of YES: list what moves to make")])]),t._v(" "),a("h4",{attrs:{id:"p-不等于-np"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p-不等于-np"}},[t._v("#")]),t._v(" P 不等于 NP")]),t._v(" "),a("ul",[a("li",[t._v("cannot engineer luck")]),t._v(" "),a("li",[t._v("generating (proofs of) solutions can be harder than checking them")])]),t._v(" "),a("p",[t._v("~"),a("a",{attrs:{href:"~@assets/50/np.png"}},[t._v("np complete")])]),t._v(" "),a("h3",{attrs:{id:"reductions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reductions"}},[t._v("#")]),t._v(" Reductions")]),t._v(" "),a("p",[t._v("Convert your problem into a problem you already know how to solve (instead of solving from scratch)\n像高中写作文一样, 当你不知道如何写的时候, 强行和你熟悉的写法扯上关系然后动手写....")]),t._v(" "),a("ul",[a("li",[t._v("most common algorithm design technique")]),t._v(" "),a("li",[t._v("unweighted shortest path → weighted (set weights = 1)")]),t._v(" "),a("li",[t._v("min-product path → shortest path (take logs) [PS6-1]")]),t._v(" "),a("li",[t._v("longest path → shortest path (negate weights) [Quiz 2, P1k]")]),t._v(" "),a("li",[t._v("shortest ordered tour → shortest path (k copies of the graph) [Quiz 2, P5]")]),t._v(" "),a("li",[t._v("cheapest leaky-tank path → shortest path (graph reduction) [Quiz 2, P6]")])]),t._v(" "),a("h3",{attrs:{id:"examples-of-np-complete-problems"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples-of-np-complete-problems"}},[t._v("#")]),t._v(" Examples of NP-Complete Problems")]),t._v(" "),a("ul",[a("li",[t._v("Knapsack (pseudopoly, not poly)")]),t._v(" "),a("li",[t._v("3-Partition: given n integers, can you divide them into triples of equal sum?")]),t._v(" "),a("li",[t._v("Traveling Salesman Problem: shortest path that visits all vertices of a given graph\n— decision version: is minimum weight ≤ x?")]),t._v(" "),a("li",[t._v("longest common subsequence of k strings")]),t._v(" "),a("li",[t._v("Minesweeper, Sudoku, and most puzzles")]),t._v(" "),a("li",[t._v("SAT: given a Boolean formula (and, or, not), is it ever true? x and not x → NO")]),t._v(" "),a("li",[t._v("shortest paths amidst obstacles in 3D")]),t._v(" "),a("li",[t._v("3-coloring a given graph")]),t._v(" "),a("li",[t._v("find largest clique in a given graph")])])])}),[],!1,null,null,null);e.default=s.exports}}]);